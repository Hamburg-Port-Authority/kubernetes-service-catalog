loki:
  # -- Deployment mode lets you specify how to deploy Loki.
  # There are 3 options:
  # - SingleBinary: Loki is deployed as a single binary, useful for small installs typically without HA, up to a few tens of GB/day.
  # - SimpleScalable: Loki is deployed as 3 targets: read, write, and backend. Useful for medium installs easier to manage than distributed, up to a about 1TB/day.
  # - Distributed: Loki is deployed as individual microservices. The most complicated but most capable, useful for large installs, typically over 1TB/day.
  # There are also 2 additional modes used for migrating between deployment modes:
  # - SingleBinary<->SimpleScalable: Migrate from SingleBinary to SimpleScalable (or vice versa)
  # - SimpleScalable<->Distributed: Migrate from SimpleScalable to Distributed (or vice versa)
  # Note: SimpleScalable and Distributed REQUIRE the use of object storage.
  deploymentMode: SimpleScalable
  loki:
    containerSecurityContext:
      seccompProfile:
        type: RuntimeDefault
    # -- Limits config
    limits_config:
      retention_period: 192h
    # -- Storage config. Providing this will automatically populate all necessary storage configs in the templated config.
    storage:
      bucketNames:
        chunks: chunks
        ruler: ruler
        admin: admin
      type: 's3'
      s3:
        s3: null
        endpoint: https://minio.minio-loki
        region: 
        secretAccessKey: null
        accessKeyId: null
        s3ForcePathStyle: true
        insecure: true
        http_config:
          insecure_skip_verify: true
    schemaConfig:
      configs:
      - from: "2023-07-01"
        index:
          period: 24h
          prefix: loki_index_
        object_store: s3
        schema: v13
        store: tsdb
      # - from: "2023-07-01"
      #   store: tsdb
      #   object_store: s3
      #   schema: v13
      #   index:
      #     prefix: index_
      #     period: 24h
    
  serviceAccount:
    create: true
    automountServiceAccountToken: true
  monitoring:
    dashboards:
      enabled: true
      namespace: null
      labels:
        grafana_dashboard: "1"
    rules:
      enabled: true
      alerting: true
    serviceMonitor:
      enabled: true
      interval: 15s
      scrapeTimeout: null
      scheme: http
      metricsInstance:
        enabled: true
    selfMonitoring:
      enabled: false
      tenant:
        name: "self-monitoring"
        secretNamespace: "{{ .Release.Namespace }}"
      grafanaAgent:
        installOperator: false
        enableConfigReadAPI: false
    lokiCanary:
      enabled: true
  backend:
    replicas: 3
    persistence:
      enableStatefulSetAutoDeletePVC: true
      size: 10Gi

  memberlist:
    service:
      publishNotReadyAddresses: true
  gateway:
    enabled: true
    replicas: 2
    verboseLogging: true
    containerSecurityContext:
      seccompProfile:
        type: RuntimeDefault
    terminationGracePeriodSeconds: 30

  chunksCache:
    # -- Specifies whether memcached based chunks-cache should be enabled
    