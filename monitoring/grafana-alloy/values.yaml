clientIntent:
  enabled: false
  name: "overlay_me"
  namespace: "overlay_me"
  # targets: 
  #   - kuberentes:
  #       name: "overlay_me"
  #       kind: "optional"
  #   - internet:
  #       domains:
  #         - "overlay_me.com"
  #       ips:
  #         - "overlay_me"
  #       ports:
  #         - "overlay_me"

alloy:
  ## Global properties for image pulling override the values defined under `image.registry` and `configReloader.image.registry`.
  ## If you want to override only one image registry, use the specific fields but if you want to override them all, use `global.image.registry`
  global:
    # -- Security context to apply to the Grafana Alloy pod.
    podSecurityContext: {}

  ## Various Alloy settings. For backwards compatibility with the grafana-agent
  ## chart, this field may also be called "agent". Naming this field "agent" is
  ## deprecated and will be removed in a future release.
  alloy:
    configMap:
      # -- Create a new ConfigMap for the config file.
      create: true
      # -- Content to assign to the new ConfigMap.  This is passed into `tpl` allowing for templating from values.
      content: |-
        discovery.kubernetes "kubernetes_pods" {
          role = "pod"
        }

        discovery.relabel "kubernetes_pods" {
          targets = discovery.kubernetes.kubernetes_pods.targets

          rule {
            source_labels = ["__meta_kubernetes_pod_controller_name"]
            regex         = "([0-9a-z-.]+?)(-[0-9a-f]{8,10})?"
            target_label  = "__tmp_controller_name"
          }

          rule {
            source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name", "__meta_kubernetes_pod_label_app", "__tmp_controller_name", "__meta_kubernetes_pod_name"]
            regex         = "^;*([^;]+)(;.*)?$"
            target_label  = "app"
          }

          rule {
            source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_instance", "__meta_kubernetes_pod_label_release"]
            regex         = "^;*([^;]+)(;.*)?$"
            target_label  = "instance"
          }

          rule {
            source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_component", "__meta_kubernetes_pod_label_component"]
            regex         = "^;*([^;]+)(;.*)?$"
            target_label  = "component"
          }

          rule {
            source_labels = ["__meta_kubernetes_pod_node_name"]
            target_label  = "node_name"
          }

          rule {
            source_labels = ["__meta_kubernetes_namespace"]
            target_label  = "namespace"
          }

          rule {
            source_labels = ["namespace", "app"]
            separator     = "/"
            target_label  = "job"
          }

          rule {
            source_labels = ["__meta_kubernetes_pod_name"]
            target_label  = "pod"
          }

          rule {
            source_labels = ["__meta_kubernetes_pod_container_name"]
            target_label  = "container"
          }

          rule {
            source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
            separator     = "/"
            target_label  = "__path__"
            replacement   = "/var/log/pods/*$1/*.log"
          }

          rule {
            source_labels = ["__meta_kubernetes_pod_annotationpresent_kubernetes_io_config_hash", "__meta_kubernetes_pod_annotation_kubernetes_io_config_hash", "__meta_kubernetes_pod_container_name"]
            separator     = "/"
            regex         = "true/(.*)"
            target_label  = "__path__"
            replacement   = "/var/log/pods/*$1/*.log"
          }
        }

        local.file_match "kubernetes_pods" {
          path_targets = discovery.relabel.kubernetes_pods.output
          sync_period = "5s"
        }

        loki.process "kubernetes_pods" {
          forward_to = [loki.write.default.receiver]

          stage.cri { }
        }

        loki.source.file "kubernetes_pods" {
          targets               = local.file_match.kubernetes_pods.targets
          forward_to            = [loki.process.kubernetes_pods.receiver]
          tail_from_end = true
        }

        loki.write "default" {
          endpoint {
            url       = "http://loki-gateway.loki.svc.cluster.local/loki/api/v1/push"
            tenant_id = "1"
          }
          external_labels = {}
        }

    # -- Path to where Grafana Alloy stores data (for example, the Write-Ahead Log).
    # By default, data is lost between reboots.
    storagePath: /tmp/alloy

    # -- Address to listen for traffic on. 0.0.0.0 exposes the UI to other
    # containers.
    listenAddr: 0.0.0.0

    # -- Port to listen for traffic on.
    listenPort: 12345

    # -- Scheme is needed for readiness probes. If enabling tls in your configs, set to "HTTPS"
    listenScheme: HTTP

    # --  Base path where the UI is exposed.
    uiPathPrefix: /

    # -- Enables sending Grafana Labs anonymous usage stats to help improve Grafana
    # Alloy.
    enableReporting: false

    # -- Security context to apply to the Grafana Alloy container.
    securityContext: {}

    # -- Resource requests and limits to apply to the Grafana Alloy container.
    resources: {}

  # Options for the extra controller used for config reloading.
  configReloader:
    # -- Enables automatically reloading when the Alloy config changes.
    enabled: true
    image:
      # -- Config reloader image registry (defaults to docker.io)
      registry: "ghcr.io"
      # -- Repository to get config reloader image from.
      repository: jimmidyson/configmap-reload
      # -- Tag of image to use for config reloading.
      tag: v0.14.0
      # -- SHA256 digest of image to use for config reloading (either in format "sha256:XYZ" or "XYZ"). When set, will override `configReloader.image.tag`
      digest: ""
    # -- Resource requests and limits to apply to the config reloader container.
    resources:
      requests:
        cpu: "1m"
        memory: "5Mi"
    # -- Security context to apply to the Grafana configReloader container.
    securityContext: {}

  controller:
    # -- Type of controller to use for deploying Grafana Alloy in the cluster.
    # Must be one of 'daemonset', 'deployment', or 'statefulset'.
    type: 'daemonset'

    # -- Tolerations to apply to Grafana Alloy pods.
    tolerations: []

  serviceMonitor:
    enabled: true
